#+TITLE: tao-core

* Core settings

Tao-core contains general editor settings. Check further comments below.

#+BEGIN_SRC emacs-lisp
;; UTF-8 all the things
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8-unix)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)

;; store all backup and autosave files in the tmp dir
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; do not create symbolic lock files
;; http://stackoverflow.com/questions/5738170/why-does-emacs-create-temporary-symbolic-links-for-modified-files/12974060#12974060
(setq create-lockfiles nil)

;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)

;; disable auto save
(setq auto-save-default nil)

;; Do not really want to type yes or no each time, so:
;; yes/no => y/n
(defalias 'yes-or-no-p 'y-or-n-p)

;; Use text-mode for unknown files
;; from https://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html
(setq-default major-mode 'text-mode)

(global-set-key (kbd "RET") 'reindent-then-newline-and-indent)

(setq
 require-final-newline t                ;auto add newline at the end of file
 default-major-mode 'text-mode          ;use text mode per default
 history-length 250                     ;default is 30
 tab-always-indent 'complete            ;try to complete before identing
 confirm-nonexistent-file-or-buffer nil ;don't ask to create a buffer
 recentf-max-saved-items 5000           ;same up to 5000 recent files
 kill-ring-max 5000                     ;truncate kill ring after 5000 entries
 mark-ring-max 5000)                    ;truncate mark ring after 5000 entries
#+END_SRC

* Evil

Long time [[http://www.vim.org][Vim]] fan cannot live without [[https://gitorious.org/evil][evil-mode]].
So install and load it as soon as possible, because:

#+BEGIN_QUOTE
  Because Vim is better editor and Emacs is better everything else.

  -- The internet
#+END_QUOTE

** key-chord-mode

#+BEGIN_QUOTE
Key-chord lets you bind commands to combination of key-strokes. Here a
"key chord" means two keys pressed simultaneously, or a single key quickly
pressed twice.
#+END_QUOTE

Used to exit insert/visual evil modes.

#+BEGIN_SRC emacs-lisp
(bundle! ace-jump-mode)
(bundle! key-chord
  (key-chord-mode 1)
  (key-chord-define-global "EE" 'evil-mode)
  (key-chord-define-global "jj" 'ace-jump-word-mode)
  (key-chord-define-global "jl" 'ace-jump-line-mode)
  (key-chord-define-global "jk" 'ace-jump-char-mode))
(bundle! space-chord
  (setq space-chord-delay 0.3))
#+END_SRC

** evil-mode

#+BEGIN_SRC emacs-lisp
(bundle! evil
   (define-key evil-insert-state-map (kbd "<escape>") 'evil-normal-state)
   (define-key evil-visual-state-map (kbd "<escape>") 'evil-normal-state)
   (key-chord-define evil-insert-state-map ",q" 'evil-normal-state)
   (key-chord-define evil-visual-state-map ",q" 'evil-normal-state)
   (key-chord-define evil-normal-state-map ",q" 'evil-normal-state) ;; = noop

   ;; moving around windows VIM style
   (define-key evil-normal-state-map (kbd "C-w <left>") 'evil-window-left)
   (define-key evil-normal-state-map (kbd "C-w <right>") 'evil-window-right)
   (define-key evil-normal-state-map (kbd "C-w <up>") 'evil-window-up)
   (define-key evil-normal-state-map (kbd "C-w <down>") 'evil-window-down)

  (setq
    ;; this stops evil from overwriting the cursor color
    evil-default-cursor t
    evil-default-state 'normal
    ;; Don't wait for any other keys after escape is pressed.
    evil-esc-delay 0
    evil-auto-indent t
    evil-regexp-search t
    evil-want-C-i-jump t)
  (add-hook 'text-mode-hook 'turn-on-evil-mode)
  (add-hook 'prog-mode-hook 'turn-on-evil-mode)
  (add-hook 'comint-mode-hook 'turn-on-evil-mode)
  (add-hook 'Info-mode-hook 'turn-off-evil-mode))
#+END_SRC

** ido

#+BEGIN_SRC emacs-lisp
;; configure ido
(bundle! smex)
(setq
  ;; Speed up ido by using less candidates
  ido-max-prospects 10
  ;; Match arbitrary points in strings
  ido-enable-prefix nil
  ;; Match across entire string
  ido-enable-flex-matching t
  ;; Create a new buffer if there's no match candidate
  ido-create-new-buffer 'always
  ;; Don't try and guess if the string under point is a file
  ido-use-filename-at-point nil
  ;; case-insensitive matching
  ido-case-fold t
  ido-everywhere t
  ;; go back in time if required
  ido-use-faces nil
  ido-vertical-define-keys 'C-n-C-p-up-down-left-right
  ido-use-virtual-buffers nil)

(require 'ido)
(ido-mode t)

(bundle! ido-vertical-mode
  (ido-vertical-mode t))

(bundle flx
  (setq gc-cons-threshold 20000000)
  (require 'flx-ido)
  (flx-ido-mode 1))

(bundle! DarwinAwardWinner/ido-ubiquitous)
#+END_SRC

** evil-leader

Evil mode is not complete without [[https://github.com/cofi/evil-leader][evil-leader]].
Map `,` key to leader for wonderful set of shortcuts.

#+BEGIN_SRC emacs-lisp
(defun bury-buffer-delete-window ()
  (interactive)
  (bury-buffer)
  (delete-window))

(bundle evil-leader
  (evil-leader/set-leader ",")
  (evil-leader/set-key
   "b" 'projectile-switch-to-buffer
   "e" 'ido-find-file)
  (eval-after-load "popwin"
    (evil-leader/set-key
      "B" 'popwin:popup-last-buffer))
   (eval-after-load "projectile"
    (evil-leader/set-key
     "f"   'projectile-find-file
     "o"   'projectile-multi-occur
     "x p" 'projectile-switch-project
     "x i" 'projectile-invalidate-cache
     "x x" 'smex))
  (eval-after-load "ag"
    (evil-leader/set-key
     "a" 'ag))
  (evil-leader/set-key
    "." 'evil-buffer
    "n" 'rename-this-buffer-and-file
    "k" 'bury-buffer-delete-window
    "x l" 'linum-mode
    "x f" 'auto-fill-mode
    "w" 'save-buffer
    "W" 'save-buffer-no-whitespace)
  (eval-after-load "evil-nerd-commenter"
    (evil-leader/set-key
      "c" 'evilnc-comment-or-uncomment-lines))
  (eval-after-load "magit"
    (evil-leader/set-key
      "g"  'magit-status
      "G"  'magit-blame-mode))
  (global-evil-leader-mode))
#+END_SRC
