#+TITLE: visual

* Graphical settings

Editor settings related to visual style or visual aids.

** General

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
;; show line numbers in mode line
(line-number-mode t)
;; show column numbers in mode line
(column-number-mode t)
;; show file size in mode line
(size-indication-mode t)
;; always highlight active line
(global-hl-line-mode 1)
;; the cursor shouldn't blink
(blink-cursor-mode nil)
#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp
(if (member "DejaVu Sans Mono" (font-family-list))
    (set-face-attribute
     'default nil :font "DejaVu Sans Mono 13"))
#+END_SRC

** Theme

*** Solarized

#+BEGIN_SRC emacs-lisp
(req-package solarized-theme
  :defer t
  :init
  (progn
    ;; make the modeline high contrast
    (setq solarized-high-contrast-mode-line t)
    ;; Use less bolding
    (setq solarized-use-less-bold t)
    ;; Puts the underline below the font bottomline instead of the baseline.
    (setq x-underline-at-descent-line t)
    ;; Don't change size of org-mode headlines (but keep other size-changes)
    (setq solarized-scale-org-headlines nil)
    (load-theme 'solarized-light t)))
#+END_SRC

*** Solar theme switcher

Changes theme based off daylight or fixed times.

#+BEGIN_SRC emacs-lisp
(req-package solar-theme-switcher
  :defer t
  :init
  (progn
    (require 'solar-theme-switcher)
    (initialize-solar-theme-switcher 'solarized-light 'solarized-dark)))
#+END_SRC

** 90 columns per line

I really do care about text/code line width, so:

#+BEGIN_SRC emacs-lisp
(require 'whitespace)
(setq whitespace-line-column 90)
(setq-default fill-column 90)
(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'prog-mode-hook 'turn-on-auto-fill)
#+END_SRC

** rainbow delimiters

Rainbow delimiters is like rainbow parentheses, but less intrusive and generally
better.

#+BEGIN_QUOTE
  Rainbow Delimiters is a "rainbow parentheses"-like mode which highlights
  parentheses, brackets, and braces according to their depth. Each successive
  level is highlighted in a different color. This makes it easy to spot
  matching delimiters, orient yourself in the code, and tell which statements
  are at a given depth.

  -- [[https://github.com/jlr/rainbow-delimiters][https://github.com/jlr/rainbow-delimiters]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(req-stable-package rainbow-delimiters
  :defer t
  :init
  (progn
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC

** popwin

popwin is a popup window manager for Emacs which makes you free from the hell
of annoying buffers such like *Help*, *Completions*, *compilation*, and etc.

#+BEGIN_SRC emacs-lisp
(req-package popwin
  :defer t
  :ensure evil-leader
  :config
  (progn
    (evil-leader/set-key
            "B" 'popwin:popup-last-buffer))
  :init
  (progn
    (setq display-buffer-function 'popwin:display-buffer)
    (require 'popwin)

    (setq popwin:special-display-config
      '(("*Help*"  :height 20)
       ("*Completions*" :noselect t)
       ("*Messages*" :noselect t :height 20)
       ("*compilation*" :noselect t)
       ("*Backtrace*" :height 20)
       ("*Messages*" :height 20)
       ("*ag search*" :height 20)
       ("*Occur*" :noselect t)
       ("*Ido Completions*" :noselect t :height 20)
       ("*magit-commit*" :noselect t :height 30 :width 80 :stick t)
       ("*magit-diff*" :noselect t :height 30 :width 80)
       ("*magit-edit-log*" :noselect t :height 15 :width 80)
       ("\\*ansi-term\\*.*" :regexp t :height 20)
       ("*shell*" :height 30)
       ("*nrepl-error*" :noselect t)
       ("*nrepl-doc*" :height 20 :stick t)
       ("*nrepl-src*" :height 20 :stick t)
       ("*nrepl-result*" :height 20 :stick t)
       ("*nrepl-macroexpansion*" :height 20 :stick t)
       ("*cider-error*" :height 20 :stick t)
       ("*cider-doc*" :height 10 :stick t)
       ("*cider-src*" :height 20 :stick t)
       ("*cider-result*" :height 20 :stick t)
       ("*cider-macroexpansion*" :height 20 :stick t)
       ("*Kill Ring*" :height 20)
       ("*Compile-Log*" :height 20 :stick t)
       ("*git-gutter:diff*" :height 20 :stick t)))
     (popwin-mode 1)))
#+END_SRC

** diminish

Modeline gets really messy with lots of packages installed. [[https://github.com/emacsmirror/diminish][diminish]] fixes
that by removing predefined minor modes from it.

#+BEGIN_SRC emacs-lisp
(req-stable-package diminish
  :defer t
  :init
  (progn
    (eval-after-load "eldoc"
      '(diminish 'eldoc-mode))
    (diminish 'abbrev-mode)
    (eval-after-load "hilit-chg"
      '(diminish 'highlight-changes-mode))
    (diminish 'auto-fill-function)
    (diminish 'whitespace-mode)
    (diminish 'flyspell-mode)
    (diminish 'undo-tree-mode)))
#+END_SRC

** guide-key-mode

#+BEGIN_SRC emacs-lisp
(req-package guide-key-tip
  :defer t
  :init
  (progn
    (setq guide-key/guide-key-sequence `("C-x"
                                         "C-c"
                                         "g"
                                         ,evil-leader/leader
                                         "z"
                                         "C-h")
                guide-key/recursive-key-sequence-flag t
                guide-key/popup-window-position 'bottom
                guide-key/idle-delay 0.5
                guide-key/text-scale-amount 0)
    (guide-key-mode 1)
    (diminish 'guide-key-mode)))
#+END_SRC

** flycheck-tip

#+BEGIN_SRC emacs-lisp
(req-stable-package flycheck-tip
  :defer t
  :init
  (progn
   (flycheck-tip-use-timer 'verbose)))
#+END_SRC
