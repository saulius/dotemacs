#+TITLE: editor

* Editor settings

General editor settings and functionality.

** Editing related settings

#+BEGIN_SRC emacs-lisp
;; don't use tabs to indent
(setq-default indent-tabs-mode nil)
(setq default-tab-width 2)

;; don't let next-line add new lines at end of file
(setq next-line-add-newlines nil)

;; make edited files end with a carriage return
(setq require-final-newline t)

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

;; Use electric-indent-mode which is a god-sent mode
(electric-indent-mode 1)
#+END_SRC

** Key bindings

#+BEGIN_SRC emacs-lisp
;; [Home] & [End] key should take you to beginning and end of lines..
(global-set-key [home] 'beginning-of-line)
(global-set-key [end] 'end-of-line)
#+END_SRC

** Spell checker

Uses [[http://www.emacswiki.org/emacs/FlySpell][Flyspell]] and [[http://aspell.net/][GNU Aspell]].
Install aspell to enable spell checker. The code snippet is mostly borrowed from
[[https://github.com/bbatsov/prelude/blob/master/core/prelude-editor.el][prelude]].

#+BEGIN_SRC emacs-lisp
(require 'flyspell)
(setq ispell-program-name "aspell"
      ispell-extra-args '("--sug-mode=ultra"))

(defun config-enable-flyspell ()
  "Enable command flyspell-mode."
  (when (executable-find ispell-program-name)
    (flyspell-mode +1)))

(add-hook 'text-mode-hook 'config-enable-flyspell)
#+END_SRC

** Syntax checker

Use [[https://github.com/flycheck/flycheck][flycheck]] is which is a better
[[http://flymake.sourceforge.net/][flymake]]. Flycheck:

#+BEGIN_QUOTE
  * Supports over 30 programming and markup languages with more than 60 different syntax checking tools
  * Fully automatic, fail-safe, on-the-fly syntax checking in background
  * Nice error indication and highlighting
  * Optional error list popup
  * Many customization options
  * A comprehensive manual
  * A simple interface to define new syntax checkers
  * A “doesn't get in your way” guarantee
  * Many 3rd party extensions

  -- https://github.com/flycheck/flycheck
#+END_QUOTE

Enable flycheck in prog-mode.

#+BEGIN_SRC emacs-lisp
(req-stable-package flycheck
  :diminish flycheck-mode
  :ensure evil-leader
  :defer t
  :config
  (progn
    (evil-leader/set-key
           "E" 'flycheck-list-errors))
  :init
  (progn
    (require 'flycheck)
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc ruby-rubylint))
    (add-hook 'prog-mode-hook 'flycheck-mode)))
#+END_SRC

** White space

Make sure white space errors are visible in prog mode.

#+BEGIN_SRC emacs-lisp
(require 'whitespace)

(setq whitespace-line-column 90
            whitespace-style '(face tabs empty trailing lines-tail))

(add-hook 'text-mode-hook 'whitespace-mode)
(add-hook 'prog-mode-hook 'whitespace-mode)
#+END_SRC

** White space trimmer

Using [[https://github.com/lewang/ws-butler][ws-bulter]] to trim white space.

#+BEGIN_QUOTE
  ws-butler -- an unobtrusive way to trim spaces from end of line

  Only lines touched get trimmed. If the white space at end of
  buffer is changed, then blank lines at the end of buffer are
  truncated respecting require-final-newline

  Trimming only happens when saving.

  -- [[https://github.com/lewang/ws-butler][https://github.com/lewang/ws-butler]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(req-stable-package ws-butler
  :diminish ws-butler-mode
  :defer t
  :init
  (progn
    (add-hook 'prog-mode-hook 'ws-butler-mode)))
#+END_SRC

** saveplace

Save cursor positions of edited files between Emacs sessions. As seen in from [[http://whattheemacsd.com/init.el-03.html]].

#+BEGIN_SRC emacs-lisp
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name ".places" config-dir))
#+END_SRC

** auto completion

The config uses [[https://github.com/company-mode/company-mode][company mode]] as
auto complete engine.

#+BEGIN_QUOTE
  Company is a text completion framework for Emacs. The name stands for
  "complete anything". It uses pluggable back-ends and front-ends to retrieve
  and display completion candidates.

  It comes with several back-ends such as Elisp, Clang, Semantic, Eclim,
  Ropemacs, Ispell, CMake, BBDB, Yasnippet, dabbrev, etags, gtags, files,
  keywords and a few others.

  The CAPF back-end provides a bridge to the standard
  completion-at-point-functions facility, and thus works with any major mode
  that defines a proper completion function

  -- [[http://company-mode.github.io/][http://company-mode.github.io/]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(req-stable-package company
  :diminish company-mode
  :config
  (progn
    (setq company-idle-delay 0.5)
    (setq company-tooltip-limit 10)
    (setq company-minimum-prefix-length 2)
    ;; invert the navigation direction if the the completion popup-isearch-match
    ;; is displayed on top (happens near the bottom of windows)
    (setq company-tooltip-flip-when-above t)

    (add-hook 'text-mode-hook 'company-mode)
    (add-hook 'prog-mode-hook 'company-mode)))
#+END_SRC

** smartparens

[[https://github.com/Fuco1/smartparens][smartparens]] is paredit 2.0,
inexchangeable for Lips-like modes. And other modes as well.

#+BEGIN_QUOTE
  Minor mode for Emacs that deals with parens pairs and tries to be smart
  about it.

  -- [[https://github.com/Fuco1/smartparens][https://github.com/Fuco1/smartparens]]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(req-stable-package smartparens
  :diminish smartparens-mode
  :defer t
  :init
  (progn
    (require 'smartparens)
    (require 'smartparens-config)
    (setq sp-base-key-bindings 'paredit)
    (setq sp-autoskip-closing-pair 'always)
    (setq sp-hybrid-kill-entire-symbol nil)
    (sp-use-paredit-bindings)
    (smartparens-global-mode t)
    (show-smartparens-global-mode +1)))
#+END_SRC

** expand region

Expand region increases the selected region by semantic units.

#+BEGIN_SRC emacs-lisp
(req-stable-package expand-region
  :defer t
  :init
  (progn
    (define-key evil-visual-state-map (kbd "e") 'er/expand-region)
    (define-key evil-visual-state-map (kbd "E") 'er/contract-region)))
#+END_SRC

** evil-surround

Evil motions for surround things based on [[https://github.com/tpope/vim-surround][vim-surround]].

#+BEGIN_SRC emacs-lisp
(req-package evil-surround
  :defer t
  :init
  (progn
   (global-evil-surround-mode 1)))
#+END_SRC

** evil-matchit

Vim matchit ported into Emacs [https://github.com/redguardtoo/evil-matchit][evil-matchit]].

#+BEGIN_SRC emacs-lisp
(req-stable-package evil-matchit
  :defer t
  :init
  (progn
   (global-evil-matchit-mode 1)))
#+END_SRC

** commenting

[[https://github.com/redguardtoo/evil-nerd-commenter][evil-nerd-commenter]] helps greatly with
commenting and uncomment lines and regions.

#+BEGIN_SRC emacs-lisp
(req-stable-package evil-nerd-commenter
  :defer t
  :ensure evil-leader
  :init
  (progn
    (evil-leader/set-key
           "c" 'evilnc-comment-or-uncomment-lines)
    (setq evilnc-hotkey-comment-operator "\\")))
#+END_SRC

** source control management

*** magit

[[https://github.com/magit/magit][magic]] Magit is an interface to the version
control system Git, implemented as an Emacs extension.

#+BEGIN_SRC emacs-lisp
(req-stable-package magit
  :ensure evil-leader
  :init
  (progn
   (dolist (mode '(magit-mode
                   magit-status-mode
                   magit-log-mode
                   magit-diff-mode
                   magit-popup-mode
                   magit-popup-sequence-mode
                   magit-log-select-mode
                   git-rebase-mode
                   magit-revision-mode))
    (evil-set-initial-state mode 'emacs))
    (evil-leader/set-key
           "g"  'magit-status
           "G"  'magit-blame-mode))
  :defer t)
#+END_SRC

*** git timemachine

Step through historic versions of git controlled file using everyone's favourite editor

#+BEGIN_SRC emacs-lisp
(req-stable-package git-timemachine
  :defer t
  :init
  (progn
   (eval-after-load 'git-timemachine
    '(progn
      (evil-make-overriding-map git-timemachine-mode-map 'normal)
      ;; force update evil keymaps after git-timemachine-mode loaded
      (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps)))))
#+END_SRC

*** git gutter

Show an indication in the gutter area indicating whether a line has
been inserted, modified or deleted.

#+BEGIN_SRC emacs-lisp
(req-stable-package git-gutter
  :diminish git-gutter-mode
  :ensure evil-leader
  :defer t
  :config
  (progn
    (evil-leader/set-key
      "u p" 'git-gutter:popup-hunk
      "u s" 'git-gutter:stage-hunk
      "u r" 'git-gutter:revert-hunk))
  :init
  (progn
    (global-git-gutter-mode t)))
#+END_SRC

*** kill ring browser
#+BEGIN_SRC emacs-lisp
(req-stable-package browse-kill-ring
  :defer t
  :ensure evil-leader
  :init
  (progn
    (evil-leader/set-key
            "x k" 'browse-kill-ring)))
#+END_SRC

** aggressive indent

aggressive-indent-mode is a minor mode that keeps your code always indented.
It reindents after every command, making it more reliable than electric-indent-mode.

#+BEGIN_SRC emacs-lisp
(req-stable-package aggressive-indent
  :defer t
  :ensure evil-leader
  :init
  (progn
     (evil-leader/set-key
       "x I" 'aggressive-indent-mode)))
#+END_SRC

** yasnippet

YASnippet is a template system for Emacs. It allows you to type an
abbreviation and automatically expand it into function templates.

#+BEGIN_SRC emacs-lisp
(req-package yasnippet
  :defer 1
  :diminish yas-minor-mode
  :config
  (progn
   (add-to-list 'yas-snippet-dirs (concat config-dir "snippets"))
   (setq yas-verbosity 1)
   (yas-reload-all)
   (add-hook 'prog-mode-hook 'yas-minor-mode)))
#+END_SRC

** evil-iedit-state

Integrates Evil with iedit state. Multiple-cursors-like functionality.

#+BEGIN_SRC emacs-lisp
(req-package iedit)

(req-package evil-iedit-state
  :defer t
  :init
  (progn
    (custom-set-faces
     '(iedit-occurrence ((t (:inherit lazy-highlight)))))
    (require 'evil-iedit-state)
    (evil-leader/set-key "i" 'evil-iedit-state/iedit-mode)))
#+END_SRC

** undo tree

VIM style undo/redo with visualizer.

#+BEGIN_SRC emacs-lisp
(req-package undo-tree
  :defer t
  :config
  (progn
   (setq undo-tree-auto-save-history t)
   (setq undo-tree-history-directory-alist
    `(("." . ,(concat config-dir "undo"))))
   (setq undo-tree-visualizer-timestamps t)
   (setq undo-tree-visualizer-diff t))
  :init
  (progn
    (evil-leader/set-key
      "U"   'undo-tree-visualize)
    (global-undo-tree-mode)))
#+END_SRC
