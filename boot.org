#+TITLE: Emacs config

* Introduction

Personal Emacs configuration written with aims to learn Emacs-Lisp, Babel,
org-mode and, of course, build a perfect development enviroment.

Sources of inspiration:
- [[Oh My Emacs][https://github.com/xiaohanyu/oh-my-emacs/]]
- [[https://github.com/nakkaya/emacs][https://github.com/nakkaya/emacs]]

The latest version is at https://github.com/saulius/dotemacs.

** Installation

1. Install Emacs 24.4+.
2. Checkout the distribution to your ~/.emacs.d directory:
    #+BEGIN_SRC sh
    cd ~
    git clone http://github.com/saulius/dotemacs .emacs.d
    #+END_SRC
3. Launch Emacs!

** Package management

Uses Emacs native package mangement with small helper library called [[https://github.com/jwiegley/use-package][use-package]]
used to setup and initialize packages.

#+BEGIN_QUOTE
  The use-package macro allows you to isolate package configuration in your
  .emacs file in a way that is both performance-oriented and, well, tidy. I
  created it because I have over 80 packages that I use in Emacs, and things
  were getting difficult to manage. Yet with this utility my total load time
  is around 2 seconds, with no loss of functionality!

  -- https://github.com/jwiegley/use-package
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives
      '(("gnu"              . "http://elpa.gnu.org/packages/")
        ("melpa-stable"     . "http://stable.melpa.org/packages/")
        ("marmalade"        . "http://marmalade-repo.org/packages/")
        ("melpa"            . "http://melpa.org/packages/")))

(package-initialize)

;; make sure use-package is available
(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))

(require 'use-package)
#+END_SRC

Automagically update packages weekly so we are always up to date on all machines.

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :ensure t
  :config
  (setq auto-package-update-interval 7)
  (auto-package-update-maybe))
#+END_SRC

** Structure

It consists of core modules and language specific modules. Core modules
reside in `core` directory, language specific modules are in `modules`
directory. `core` modules will be loaded by default. Language specific modes
are optional and can be loaded on demand.

Make sure all modules are loadable, extend `load-path` with relevant paths:

#+BEGIN_SRC emacs-lisp
(defvar config-dir user-emacs-directory
  "The dir where config lives.")
(defvar config-core-dir (expand-file-name "core" config-dir)
  "The dir where config core modules live.")
(defvar config-module-dir (expand-file-name "modules" config-dir)
  "The dir where config custom, language specific modules live.")
#+END_SRC

Load all core modules:

#+BEGIN_SRC emacs-lisp
(org-babel-load-file (expand-file-name "functions.org" config-core-dir))
(org-babel-load-file (expand-file-name "core.org" config-core-dir))
(org-babel-load-file (expand-file-name "editor.org" config-core-dir))
(org-babel-load-file (expand-file-name "org.org" config-core-dir))
(org-babel-load-file (expand-file-name "navigation.org" config-core-dir))
(org-babel-load-file (expand-file-name "visual.org" config-core-dir))
;; OSX specific config module
(when (eq system-type 'darwin)
  (org-babel-load-file (expand-file-name "osx.org" config-core-dir)))
#+END_SRC

Load language modules:

#+BEGIN_SRC emacs-lisp
(org-babel-load-file (expand-file-name "clojure.org" config-module-dir))
(org-babel-load-file (expand-file-name "groovy.org" config-module-dir))
(org-babel-load-file (expand-file-name "go.org" config-module-dir))
(org-babel-load-file (expand-file-name "scala.org" config-module-dir))
(org-babel-load-file (expand-file-name "markup.org" config-module-dir))
(org-babel-load-file (expand-file-name "ruby.org" config-module-dir))
(org-babel-load-file (expand-file-name "web.org" config-module-dir))
#+END_SRC
