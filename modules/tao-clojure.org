#+TITLE: tao-clojure

* Clojure

Various modes related to markup languages, e.g.: XML, JSON, Yaml, Markdown
etc.

#+BEGIN_SRC emacs-lisp

(bundle! clojure-mode
  (eval-after-load 'clojure-mode
    '(progn
       (defun clojure-mode-defaults ()
         (smartparens-strict-mode +1)
         (subword-mode +1)
         (clojure-test-mode +1))

       (setq my-clojure-mode-hook 'clojure-mode-defaults)

       (add-hook 'my-clojure-mode-hook (lambda ()
                                    (run-hooks 'my-clojure-mode-hook))))))
(bundle! cider
  (setq cider-show-error-buffer nil)
  (setq cider-repl-pop-to-buffer-on-connect t)

  (eval-after-load 'cider
    '(progn
       (add-hook 'cider-mode-hook 'cider-turn-on-eldoc-mode)

       (defun cider-repl-mode-defaults ()
         (subword-mode +1)
         (smartparens-strict-mode +1)
         (cider-repl-toggle-pretty-printing))

       (setq cider-repl-mode-hook 'cider-repl-mode-defaults)
       ;; Prevent C-c C-k from prompting to save the file corresponding to the buffer being loaded, if it's modified:
       (setq cider-prompt-save-file-on-load nil)
       (setq cider-show-error-buffer 'only-in-repl)

       (add-hook 'repl-mode-hook (lambda ()
                                 (run-hooks 'cider-repl-mode-hook))))))
#+END_SRC
