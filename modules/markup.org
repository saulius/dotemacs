#+TITLE: markup

* Markup

Various modes related to markup languages, e.g.: XML, JSON, Yaml, Markdown
etc.

** XML

Do not really use XML too often, but it happens from time to time.
Be prepared.

#+BEGIN_SRC emacs-lisp
(require 'nxml-mode)

;; from prelude  https://github.com/bbatsov/prelude/blob/02b3f27e65ae6e213c8046d3196eacb24630600f/modules/prelude-xml.el
(push '("<\\?xml" . nxml-mode) magic-mode-alist)

;; following files should be treated as xml files
(add-to-list 'auto-mode-alist '("\\.pom$" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.atom$" . nxml-mode))

(setq nxml-child-indent 4)
(setq nxml-attribute-indent 4)
(setq nxml-auto-insert-xml-declaration-flag nil)
(setq nxml-bind-meta-tab-to-complete-flag t)
(setq nxml-slash-auto-complete-flag t)
#+END_SRC

** JSON

#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode (("\\.json$" . json-mode))
  :init
  (setq-default js-indent-level 2)
  :ensure t)
#+END_SRC

** Yaml

Since I use [[https://www.ruby-lang.org/en/][Ruby]] and [[http://www.ansible.com/home][Ansible]]
it's useful to have [[https://github.com/yoshiki/yaml-mode/][yaml-mode]] at hand.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :mode (("\\.yml$"  . yaml-mode)
         ("\\.yaml$" . yaml-mode)))
#+END_SRC

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.mk$"  . markdown-mode)
         ("\\.mkd$" . markdown-mode)))
#+END_SRC

** SQL

#+BEGIN_SRC emacs-lisp
(use-package sql
  :ensure t
  :mode (("\\.hql$"  . sql-mode)
         ("\\.psql$" . sql-mode)
         ("\\.q$"    . sql-mode))
  :config
  (add-hook 'sql-mode-hook
    (lambda ()
      (sql-highlight-mysql-keywords))))

(use-package sql-indent
  :ensure t
  :init
  (setq-default sql-indent-offset tab-width))
#+END_SRC

** Cucumber

#+BEGIN_SRC emacs-lisp
(use-package feature-mode
  :ensure t
  :init
  (autoload 'feature-mode "feature-mode.el" "Cucumber mode" t)
  (setq org-table-number-regexp "no-align")
  :mode (("\\.feature\\'" . feature-mode)))
#+END_SRC

** Toml

#+BEGIN_SRC emacs-lisp
(use-package toml-mode
  :ensure t)
#+END_SRC
