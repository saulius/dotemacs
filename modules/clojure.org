#+TITLE: clojure

* Clojure

#+BEGIN_SRC emacs-lisp
(use-package highlight-parentheses
  :diminish highlight-parentheses-mode
  :ensure t)
#+END_SRC

Configuration for [[http://clojure.org][Clojure]] programming language.

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t
  :mode (("\\.boot$"  . clojure-mode)
         ("\\.clj$"   . clojure-mode)
         ("\\.cljs$"  . clojure-mode)
         ("\\.cljx$"  . clojure-mode)
         ("\\.edn$"   . clojure-mode)
         ("\\.cljc$"  . clojure-mode))
  :config
  (defun cider-eval-expression-at-point-in-repl ()
    (interactive)
    (let ((form (cider-defun-at-point)))
      ;; Strip excess whitespace
      (while (string-match "\\`\s+\\|\n+\\'" form)
             (setq form (replace-match "" t t form)))
       (set-buffer (cider-get-repl-buffer))
       (goto-char (point-max))
       (insert form)
       (cider-repl-return)))

  (evil-leader/set-key-for-mode 'clojure-mode
    "m ," 'cider-test-run-tests
    "m J" 'cider-jack-in
    "m n" 'cider-repl-set-ns
    "m f" 'cider-format-defun
    "m k" 'cider-load-buffer
    "m e" 'cider-eval-defun-at-point
    "m l" 'cider-eval-last-sexp
    "m b" 'cider-eval-buffer
    "m m" 'cider-macroexpand-1
    "m c" 'cider-eval-expression-at-point-in-repl
    "m d" 'cider-doc-map
    "m r" 'cider-refresh
    "m R" 'cider-reset)

   ;; indent component service lifecycle macros as functions
  (put-clojure-indent 'init 'defun)
  (put-clojure-indent 'start 'defun)
  (put-clojure-indent 'stop 'defun)

  (add-hook 'clojure-mode-hook (lambda ()
                                (smartparens-strict-mode 1)
                                (evil-cleverparens-mode 1)
                                (highlight-parentheses-mode 1)
                                (subword-mode 1))))

(use-package cider
  :ensure t
  :init
  (setq cider-repl-pop-to-buffer-on-connect t)
  (setq cider-prompt-save-file-on-load nil)
  :config
  (dolist (mode '(cider-repl-mode
                  cider-error-buffer
                  cider-test-report-mode
                  cider-inspector-mode
                  cider-macroexpansion-mode
                  cider-stacktrace-mode
                  cider-docview-mode))
    (evil-set-initial-state mode 'emacs))

  (defadvice cider--debug-mode (after toggle-evil activate)
   "Turn off `evil-local-mode' when enabling
   `cider--debug-mode', and turn it back on when disabling
   `cider--debug-mode'."
   (evil-local-mode (if cider--debug-mode -1 1)))

  (defadvice cider-popup-buffer-mode (after toggle-evil activate)
   (evil-local-mode (if cider-popup-buffer-mode -1 1)))

  ;; Prevent C-c C-k from prompting to save the file corresponding to the buffer being loaded, if it's modified:
  (setq cider-prompt-save-file-on-load nil)

  (add-hook 'cider-mode-hook (lambda ()
                              (cider-turn-on-eldoc-mode 1)
                              (add-hook 'after-save-hook
                               (lambda ()
                                (if (and (boundp 'cider-mode) cider-mode)
                                 (cider-refresh))))
                              (subword-mode 1)
                              (smartparens-strict-mode 1)
                              (evil-cleverparens-mode 1)
                              (highlight-parentheses-mode 1))))
#+END_SRC
